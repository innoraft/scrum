<?php

/**
 * @file
 * Module implementing scrum related functionality.
 */

/**
 * Implements hook_page_alter().
 */
function scrum_general_apis_page_alter(&$page) {

  $path = current_path();

  $theme_path = drupal_get_path('theme', 'adminimal');
  drupal_add_js($theme_path . '/js/scrum.js', 'file');
  drupal_add_css($theme_path . '/css/scrum.css', 'file');
  drupal_add_js(array('scrum_update_ajax' => array('scrum_ajaxUrl' => url('scrum/ajax'))), 'setting');

  switch ($path) {
    case 'testimonial':
      break;
  }
}

/**
 * Implements hook_menu().
 */
function scrum_general_apis_menu() {

  $items['admin/config/scrum_mail'] = array(
    'title' => 'Scrum Mails',
    'description' => 'Contain the scrum mail variables',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scrum_mail_variable'),
    'access callback' => 'user_access',
    'access arguments' => array('access administration pages'),
    'file path' => drupal_get_path('module', 'scrum_general_apis'),
    'file' => 'includes/scrum_mail.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_node_validate().
 */
function scrum_general_apis_node_validate($node, $form, &$form_state) {
  global $user;

  $type = is_string($node) ? $node : $node->type;
  if ($type == 'ct_scrum' && is_null($node->nid)) {

    $tid = $node->field_ct_scrum['und'][0]['tid'];
    $start = date('U', mktime(0, 0, 0, date('n'), date('j'), date('Y')));
    $end = date('U', mktime(23, 59, 59, date('n'), date('j'), date('Y')));

    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'ct_scrum')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_ct_scrum', 'tid', $tid)
    ->range(0, 1)
    ->propertyCondition('created', array($start, $end), "between")
    ->execute();

    if (!empty($result)) {
      $errormessage = t('Sorry, you have created scrum for today');
      form_set_error('time', $errormessage);
    }
  }
  else {
    $roles = $user->roles;
    if (!in_array('administrator', $roles)) {
      $created_date = $node->created;
      $created_date = date('Y-m-d', $created_date);
      $created_date = new DateTime($created_date);

      $today_date = date('Y-m-d');
      $today_date = new DateTime($today_date);


      $diff = $today_date->diff($created_date)->format("%a");

      if ($diff > 0) {
        $errormessage = t('Sorry, you can not update previous scrums');
        form_set_error('time', $errormessage);
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function scrum_general_apis_form_node_form_alter(&$form, &$form_state) {

  global $user;
  $roles = $user->roles;
  if (!in_array('administrator', $roles)) {

    $uid = $form['uid']['#value'];
    $scrum_vocab = taxonomy_vocabulary_machine_name_load('vocab_scrum');
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $scrum_vocab->vid)
    ->propertyOrderBy('weight')
    ->fieldCondition('field_ct_status', 'value', 1)
    ->fieldCondition('field_ct_scrum_master', 'target_id', $uid)
    ->execute();
    if (!empty($result) && isset($result['taxonomy_term'])) {
      $tids = array_keys($result['taxonomy_term']);
      $tids = array_flip($tids);
      $options = $form['field_ct_scrum']['und']['#options'];
      $result = array_intersect_key($options, $tids);
      $form['field_ct_scrum']['und']['#options'] = $result;
    }
    else {
      $result = array();
      $form['field_ct_scrum']['und']['#options'] = $result;
      $errormessage = t('Sorry, Right now you are not scrum manager of any scrum');
      form_set_error('time', $errormessage);
    }
  }
}


/**
 * Implements hook_cron().
 */
function scrum_general_apis_cron() {
  $scrum_time = variable_get('scrum_mail_time', 18);
  $current_time = date('G');
  if ($scrum_time == $current_time) {

    // Get all active scrums.
    if ($scrum_vocab = taxonomy_vocabulary_machine_name_load('vocab_scrum')) {
      $query = new EntityFieldQuery();
      $result = $query->entityCondition('entity_type', 'taxonomy_term')
      ->propertyCondition('vid', $scrum_vocab->vid)
      ->propertyOrderBy('weight')
      ->fieldCondition('field_ct_status', 'value', 1)
      ->execute();

      if (!empty($result) && isset($result['taxonomy_term'])) {
        $tids = array_keys($result['taxonomy_term']);

        // Get current date scrum for every project.
        $exclude_tids = array();
        if (!empty($tids)) {
          $start = date('U', mktime(0, 0, 0, date('n'), date('j'), date('Y')));
          $end = date('U', mktime(23, 59, 59, date('n'), date('j'), date('Y')));
          foreach ($tids as $tid) {
            $query = new EntityFieldQuery();
            $result = $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'ct_scrum')
            ->propertyCondition('status', NODE_PUBLISHED)
            ->fieldCondition('field_ct_scrum', 'tid', $tid)
            ->range(0, 1)
            ->propertyCondition('created', array($start, $end), "between")
            ->execute();

            if (empty($result)) {
              $exclude_tids[] = $tid;
            }
          }

          if (!empty($exclude_tids)) {
            $terms = taxonomy_term_load_multiple($exclude_tids);
            $mail_ids = array();
            $scrum_mail_detail = array();
            foreach ($terms as $term) {
              $user_id = field_get_items('taxonomy_term', $term, 'field_ct_scrum_master');
              $scrum_mail_detail[$term->tid]['project_name'] = $term->name;

              if (isset($user_id[0]['target_id'])) {
                $uid = $user_id[0]['target_id'];
                $user = user_load($uid);
                $mail_ids[] = isset($user->mail) ? $user->mail : NULL;
                $scrum_mail_detail[$term->tid]['email'] = isset($user->mail) ? $user->mail : NULL;
                $scrum_mail_detail[$term->tid]['scrum_master'] = isset($user->name) ? $user->name : NULL;
              }
            }

            foreach ($scrum_mail_detail as $key => $value) {
              $mail_to = isset($value['email']) ? $value['email'] : NULL;
              if (!is_null($mail_to)) {
                $from = variable_get('site_mail', '');
                $to = $mail_to;
                $ln = language_list();
                $from = $from;
                $language = $ln['en'];
                $params['subject'] = variable_get('scrum_mail_subject', 'Create you scrum');

                $scrum_template = theme('scrum_mail_template', array('data' => $value));
                $params['body'][] = $scrum_template;
                $mail_cc = variable_get('scrum_mail_cc', 'mukesh.agarwal@innoraft.com,basant.sharma@innoraft.com');
                $params['headers'] = array(
                  'Cc' => $mail_cc,
                  'MIME-Version' => '1.0',
                  'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
                );

                drupal_mail('scrum_general_apis', 'scrum_mail_key', $to, $language, $params, $from, TRUE);
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_mail().
 */
function scrum_general_apis_mail($key, &$message, $params) {
  if (isset($params['headers'])) {
    $message['headers'] += $params['headers'];
  }
  if ($key == 'scrum_mail_key') {
    $message['subject'] = $params['subject'];
    $message['body'] = $params['body'];
  }
}


/**
 * Implements hook_theme().
 */
function scrum_general_apis_theme($existing, $type, $theme, $path) {
  return array(
    'scrum_mail_template' => array(
      'variables' => array('data' => NULL),
      'template' => 'scrum-mail-template',
    ),
  );
}
